/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vrimplantacao2_5.conversor;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Exceptions;
import org.postgresql.util.PSQLException;
import vrframework.classe.ProgressBar;
import vrimplantacao2_5.conversor.dao.ConversorDAO;
import vrimplantacao2_5.conversor.vo.ControleDadosConvertidosVO;

/**
 *
 * @author Michael
 */
public class ConversorGUI extends javax.swing.JFrame {

    ConversorDAO dao;

    /**
     * Creates new form ConversorGUI
     */
    public ConversorGUI() throws Exception {
        this.dao = new ConversorDAO();
        initComponents();
        setLocationRelativeTo(null);
        panelTabelas.setVisible(false);
        labelResultado.setVisible(false);
        labelInfo.setVisible(false);
        jTableDados.getTableHeader().setOpaque(false);
        ((DefaultTableCellRenderer) jTableDados.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        jTableDados.getTableHeader().setBackground(Color.BLACK);
        jTableDados.getTableHeader().setForeground(Color.ORANGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextNomeBanco = new javax.swing.JTextField();
        jBCriarBanco = new javax.swing.JButton();
        panelTabelas = new javax.swing.JPanel();
        txtArquivo = new vrframework.bean.fileChooser.VRFileChooser();
        txtDelimitador = new javax.swing.JTextField();
        vRLabel8 = new vrframework.bean.label.VRLabel();
        vRLabel1 = new vrframework.bean.label.VRLabel();
        jLabel2 = new javax.swing.JLabel();
        jBCriarTabela = new javax.swing.JButton();
        jBPopularTabela = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextNomeTabela = new javax.swing.JTextField();
        labelInfo = new javax.swing.JLabel();
        labeldados = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDados = new javax.swing.JTable();
        labelResultado = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jLabel1.text")); // NOI18N

        jTextNomeBanco.setText(org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jTextNomeBanco.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jBCriarBanco, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jBCriarBanco.text")); // NOI18N
        jBCriarBanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCriarBancoActionPerformed(evt);
            }
        });

        txtDelimitador.setText(org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.txtDelimitador.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(vRLabel8, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.vRLabel8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(vRLabel1, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.vRLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jBCriarTabela, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jBCriarTabela.text")); // NOI18N
        jBCriarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCriarTabelaActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBPopularTabela, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jBPopularTabela.text")); // NOI18N
        jBPopularTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPopularTabelaActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jLabel3.text")); // NOI18N

        jTextNomeTabela.setText(org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jTextNomeTabela.text")); // NOI18N

        labelInfo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labelInfo, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.labelInfo.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(labeldados, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.labeldados.text")); // NOI18N

        jTableDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tabelas", "Tem Dados?"
            }
        ));
        jScrollPane1.setViewportView(jTableDados);
        if (jTableDados.getColumnModel().getColumnCount() > 0) {
            jTableDados.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTableDados.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jTableDados.columnModel.title0")); // NOI18N
            jTableDados.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTableDados.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.jTableDados.columnModel.title1")); // NOI18N
        }

        javax.swing.GroupLayout panelTabelasLayout = new javax.swing.GroupLayout(panelTabelas);
        panelTabelas.setLayout(panelTabelasLayout);
        panelTabelasLayout.setHorizontalGroup(
            panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabelasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTabelasLayout.createSequentialGroup()
                        .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vRLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDelimitador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTabelasLayout.createSequentialGroup()
                                .addComponent(vRLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTabelasLayout.createSequentialGroup()
                        .addComponent(labelInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBCriarTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBPopularTabela))
                    .addComponent(jTextNomeTabela)
                    .addGroup(panelTabelasLayout.createSequentialGroup()
                        .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(labeldados)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTabelasLayout.setVerticalGroup(
            panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTabelasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextNomeTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vRLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vRLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDelimitador, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBPopularTabela)
                        .addComponent(jBCriarTabela))
                    .addComponent(labelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(labeldados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        labelResultado.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(labelResultado, org.openide.util.NbBundle.getMessage(ConversorGUI.class, "ConversorGUI.labelResultado.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTabelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(labelResultado))
                                    .addComponent(jTextNomeBanco, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jBCriarBanco))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextNomeBanco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBCriarBanco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelResultado)
                .addGap(8, 8, 8)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTabelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCriarBancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCriarBancoActionPerformed
        if (validaNomeBanco()) {
            dao.setNomeBanco(jTextNomeBanco.getText());
            Thread thread = new Thread() {
                @Override
                public void run() {
                    try {
                        ProgressBar.show();
                        ProgressBar.setCancel(false);
                        ProgressBar.setStatus("Criando o banco, por favor aguarde.");
                        criarBanco();
                        ProgressBar.dispose();
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                        ProgressBar.dispose();
                        Exceptions.printStackTrace(ex);
                    }
                }
            };
            thread.start();
        }
        labeldados.setText("Dados de Conversão do banco: " + jTextNomeBanco.getText());
    }//GEN-LAST:event_jBCriarBancoActionPerformed

    private void jBCriarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCriarTabelaActionPerformed
        if (validaNomeTabelaEArquivo()) {
            Thread thread = new Thread() {
                @Override
                public void run() {
                    try {
                        ProgressBar.show();
                        ProgressBar.setCancel(false);
                        ProgressBar.setStatus("Criando tabela, por favor aguarde.");
                        dao.setArquivo(txtArquivo.getArquivo());
                        dao.setNomeDaTabela(jTextNomeTabela.getText());
                        criarTabela();
                        ProgressBar.dispose();
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                        ProgressBar.dispose();
                        Exceptions.printStackTrace(ex);
                    }
                }
            };
            thread.start();
        }
    }//GEN-LAST:event_jBCriarTabelaActionPerformed

    private void jBPopularTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPopularTabelaActionPerformed
        dao.setArquivo(txtArquivo.getArquivo());
        dao.setNomeDaTabela(jTextNomeTabela.getText());
        dao.setNomeBanco(jTextNomeBanco.getText());
        Thread thread = new Thread() {
            @Override
            public void run() {
                try {
                    ProgressBar.show();
                    ProgressBar.setCancel(false);
                    ProgressBar.setStatus("Populando tabela, Por favor aguarde.");
                    dao.popularTabelas();
                    dao.atualizaDeDadosConvertidos(jTextNomeBanco.getText(), jTextNomeTabela.getText());
                    carregaJTabela();
                    ProgressBar.dispose();
                    JOptionPane.showMessageDialog(null, "Tudo certo!\n\n A tabela " + jTextNomeTabela.getText() + " foi preenchida com sucesso!");
                    txtArquivo.setEnabled(true);
                    txtDelimitador.setEnabled(true);
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                    Exceptions.printStackTrace(ex);
                    ProgressBar.dispose();
                    JOptionPane.showMessageDialog(null, "Ops, tivemos um erro ao popular a tabela! \n\n"
                            + "Confira se o nome digitado da tabela está correto."
                            + "Confira se a planilha corresponde a tabela que foi criada.\n"
                            + "Confira se não há erro na planilha.\n"
                            + "Se o erro persistir, contate o setor de Migração.\n\nErro: " + ex.getMessage());
                }
                txtArquivo.setEnabled(true);
                labelResultado.setText("<html> <font size=\"2\" color=blue >Pode continuar criando tabelas no banco: " + jTextNomeBanco.getText() + "</font></html>");
                labelInfo.setText("");
            }
        };
        thread.start();
    }//GEN-LAST:event_jBPopularTabelaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ConversorGUI().setVisible(true);
                    ProgressBar.show();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCriarBanco;
    private javax.swing.JButton jBCriarTabela;
    private javax.swing.JButton jBPopularTabela;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableDados;
    private javax.swing.JTextField jTextNomeBanco;
    private javax.swing.JTextField jTextNomeTabela;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JLabel labelResultado;
    private javax.swing.JLabel labeldados;
    private javax.swing.JPanel panelTabelas;
    private vrframework.bean.fileChooser.VRFileChooser txtArquivo;
    private javax.swing.JTextField txtDelimitador;
    private vrframework.bean.label.VRLabel vRLabel1;
    private vrframework.bean.label.VRLabel vRLabel8;
    // End of variables declaration//GEN-END:variables

    private void criarBanco() throws Exception {
        try {
            dao.criarBanco();
            dao.criarControleDeDadosConvertidos();
            ProgressBar.dispose();
            labelResultado.setText("<html> <font size=\"2\" color=blue >Banco de Dados criado com sucesso</font></html>");
            labelResultado.setVisible(true);
            panelTabelas.setVisible(true);
        } catch (PSQLException ex) {
            labelResultado.setText("<html> <font size=\"2\" color=red>Banco de Dados que você digitou provavelmente já existe.</font></html>");
            labelResultado.setVisible(true);
            panelTabelas.setVisible(true);
            ProgressBar.dispose();
            ex.printStackTrace();
        } catch (Exception ex) {
            labelResultado.setText("<html> <font size=\"2\" color=red >Houve algum erro. Contate o setor de Migração</font></html>");
            labelResultado.setVisible(true);
            panelTabelas.setVisible(false);
            ProgressBar.dispose();
            Exceptions.printStackTrace(ex);
        }
        carregaJTabela();
    }

    public void criarTabela() throws Exception {
        try {
            List<String> dados = new ArrayList<>();
            dados = dao.captaCabecalhoTabela();
            dao.criarTabelas(dados);
            dao.insereDeDadosConvertidos(jTextNomeBanco.getText(), jTextNomeTabela.getText());
            labelInfo.setText("<html> <font size=\"2\" color=blue>Tabela Criada com " + dao.getTotalCabecalho() + " Campos</font></html>");
            labelInfo.setVisible(true);
            //txtArquivo.setEnabled(false);
            txtDelimitador.setEnabled(false);
        } catch (PSQLException e) {
            labelInfo.setText("<html> <font size=\"2\" color=red>Não foi possível criar a tabela, verifique se ela já não foi criada.</font></html>");
            labelInfo.setVisible(true);
            JOptionPane.showMessageDialog(null, "Ops, tivemos um erro ao criar a tabela! \n\n"
                    + "Confira sua planilha e se o erro persistir, contate o setor de Migração.\n\nErro: " + e.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ops, tivemos um erro ao criar a tabela! \n\n"
                    + "Confira sua planilha e se o erro persistir, contate o setor de Migração.\n\nErro: " + ex.getMessage());
            System.out.println(ex.getMessage());
            Exceptions.printStackTrace(ex);
        }
        carregaJTabela();
    }

    public boolean validaNomeBanco() {
        if ("".equals(jTextNomeBanco.getText()) || jTextNomeBanco.getText() == null) {
            JOptionPane.showMessageDialog(this, "Você precisa digitar um nome válido para o banco. \n\n"
                    + "Exemplo: NOME_DO_BANCO, NOME_DO_BANCO_10.");
            jTextNomeBanco.grabFocus();
            return false;
        } else {
            return true;
        }
    }

    public boolean validaNomeTabelaEArquivo() {
        if (!"".equals(txtArquivo.getArquivo().trim())) {
            if (!txtArquivo.getArquivo().endsWith(".xls") && !txtArquivo.getArquivo().endsWith(".csv")) {
                JOptionPane.showMessageDialog(this, "Planilha deve estar no formato xls ou csv!\n");
                txtArquivo.grabFocus();
                return false;
            }
        }
        if ("".equals(txtArquivo.getArquivo().trim()) || txtArquivo.getArquivo().trim() == null) {
            JOptionPane.showMessageDialog(this, "Precisa selecionar uma planilha para popular o banco!\n");
            txtArquivo.grabFocus();
            return false;
        }
        if ("".equals(jTextNomeTabela.getText()) || jTextNomeTabela.getText() == null) {
            JOptionPane.showMessageDialog(this, "Você precisa digitar um nome válido para a tabela. \n\n"
                    + "Exemplo: TAB_PRODUTO.");
            jTextNomeTabela.grabFocus();
            return false;
        } else {
            return true;
        }
    }

    private void carregaJTabela() throws Exception {
        DefaultTableModel modelo = (DefaultTableModel) jTableDados.getModel();
        modelo.setNumRows(0);
        List<ControleDadosConvertidosVO> dadosCOnvertidos = dao.captaDadosConvertidos(jTextNomeBanco.getText(), jTextNomeTabela.getText());
        for (ControleDadosConvertidosVO dado : dadosCOnvertidos) {
            modelo.addRow(new Object[]{
                dado.getNomeTabela(),
                dado.getPopulada()
            });
        }
        jTableDados.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected,
                        hasFocus, row, column);
                setHorizontalAlignment(JLabel.CENTER);
                if (row%2 == 0) {
                    setBackground(Color.WHITE);
                } else {
                    setBackground(Color.LIGHT_GRAY);
                }
                return this;
            }
        });
    }
}
