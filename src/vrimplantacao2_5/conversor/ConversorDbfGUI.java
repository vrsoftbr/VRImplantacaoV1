/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vrimplantacao2_5.conversor;

import com.linuxense.javadbf.DBFReader;
import com.linuxense.javadbf.DBFRow;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.openide.util.Exceptions;
import org.postgresql.util.PSQLException;
import vrframework.classe.ProgressBar;
import vrimplantacao2.utils.sql.SQLBuilder;
import vrimplantacao2_5.conversor.dao.ConversorDbfDAO;

/**
 *
 * @author Desenvolvimento
 */
public class ConversorDbfGUI extends javax.swing.JFrame {

    private String regexp = "([\\W])";
    ConversorDbfDAO dao;

    /**
     * Creates new form ConversorDbfGUI
     */
    public ConversorDbfGUI() {
        this.dao = new ConversorDbfDAO();
        try {
            dao.criarControleDeDadosConvertidos();
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
        initComponents();
        setLocationRelativeTo(null);
        jFileChooser.setMultiSelectionEnabled(true);
        jFileChooser.setVisible(false);
        labelResultado.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jTextNomeBanco = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        labelResultado = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConversorDbfGUI.class, "ConversorDbfGUI.jLabel1.text")); // NOI18N

        jTextNomeBanco.setText(org.openide.util.NbBundle.getMessage(ConversorDbfGUI.class, "ConversorDbfGUI.jTextNomeBanco.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ConversorDbfGUI.class, "ConversorDbfGUI.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(labelResultado, org.openide.util.NbBundle.getMessage(ConversorDbfGUI.class, "ConversorDbfGUI.labelResultado.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextNomeBanco)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelResultado)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1)
                            .addComponent(jFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextNomeBanco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelResultado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        if (evt.getActionCommand().equals(javax.swing.JFileChooser.CANCEL_SELECTION)) {
            this.dispose();
        } else {
            salvar();
        }
    }//GEN-LAST:event_jFileChooserActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (validaNomeBanco()) {
            dao.setNomeBanco(jTextNomeBanco.getText());
            Thread thread = new Thread() {
                @Override
                public void run() {
                    try {
                        ProgressBar.show();
                        ProgressBar.setCancel(false);
                        ProgressBar.setStatus("Criando o banco, por favor aguarde.");
                        criarBanco();
                        ProgressBar.dispose();
                        jFileChooser.setVisible(true);
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                        ProgressBar.dispose();
                        Exceptions.printStackTrace(ex);
                    }
                }
            };
            thread.start();
        }
        labelResultado.setText("Dados de Convers√£o do banco: " + jTextNomeBanco.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversorDbfGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversorDbfGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversorDbfGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversorDbfGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConversorDbfGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextNomeBanco;
    private javax.swing.JLabel labelResultado;
    // End of variables declaration//GEN-END:variables

    public void criarBanco() {
        try {
            dao.criarBanco();
            dao.criarControleDeDadosConvertidos();
            ProgressBar.dispose();
            labelResultado.setText("<html> <font size=\"2\" color=blue >Banco de Dados criado com sucesso</font></html>");
            labelResultado.setVisible(true);
        } catch (PSQLException ex) {
            labelResultado.setText("<html> <font size=\"2\" color=red>Banco de Dados que voc√™ digitou provavelmente j√° existe.</font></html>");
            labelResultado.setVisible(true);
            ProgressBar.dispose();
            ex.printStackTrace();
        } catch (Exception ex) {
            labelResultado.setText("<html> <font size=\"2\" color=red >Houve algum erro. Contate o setor de Migra√ß√£o</font></html>");
            labelResultado.setVisible(true);
            ProgressBar.dispose();
            Exceptions.printStackTrace(ex);
        }
    }

    public boolean validaNomeBanco() {
        if ("".equals(jTextNomeBanco.getText()) || jTextNomeBanco.getText() == null) {
            JOptionPane.showMessageDialog(this, "Voc√™ precisa digitar um nome v√°lido para o banco. \n\n"
                    + "Exemplo: NOME_DO_BANCO, NOME_DO_BANCO_10.");
            jTextNomeBanco.grabFocus();
            return false;
        } else {
            return true;
        }
    }

    private void salvar() {
        Thread thread = new Thread() {
            @Override
            public void run() {
                try {
                    ProgressBar.show();
                    ProgressBar.setCancel(false);
                    File[] files = jFileChooser.getSelectedFiles();
                    for (File file : files) {
                        String tabela = file.getName().substring(0, file.getName().lastIndexOf("."));
                        dao.setNomeDaTabela(tabela);
                        ProgressBar.setStatus("Criando tabela: " + tabela + ", por favor aguarde.");
                        DBFReader reader = new DBFReader(new FileInputStream(file));
                        reader.setMemoFile(new File("/home/desenvolvimento/Documentos/databases/DBF/Sao Mateus/usados/CLIENTE.FPT"));
                        List<String> dadosCabecalho = new ArrayList<>();
                        for (int i = 0; i < reader.getFieldCount(); i++) {
                            dadosCabecalho.add(reader.getField(i).getName());
                        }

                        dao.criarTabelas(dadosCabecalho);

                        dao.insereDeDadosConvertidos(jTextNomeBanco.getText(), tabela);

                        List<SQLBuilder> inserts = new ArrayList<>();

                        ProgressBar.setStatus("Preparando dados da tabela: " + tabela + ", por favor aguarde.");
                        ProgressBar.setMaximum(reader.getRecordCount());

                        SQLBuilder sql = new SQLBuilder();
                        sql.setTableName(tabela);
                        DBFRow linha;
                        while ((linha = reader.nextRow()) != null) {
                            for (int i = 0; i < dadosCabecalho.size(); i++) {
                                String cabecalhoBase = dadosCabecalho.get(i).replaceAll(regexp, "").trim().replace(",", "_");//.replace("-", "").replace(" ", "").replace("\\", "").replace("/", "").replace(".", "").replace(",", "_");
                                sql.put(cabecalhoBase, linha.getString(cabecalhoBase), "UTF-8");
                                sql.setFormatarSQL(true);
                            }
                            inserts.add(sql);
                            ProgressBar.next();
                        }
                        
                        ProgressBar.setStatus("Salvando dados da tabela: " + tabela + ", por favor aguarde.");
                        ProgressBar.setMaximum(reader.getRecordCount());

                        dao.conferePopularTabelas();
                        dao.abrirConexao();
                        for (SQLBuilder insert : inserts) {
                            dao.popularTabelasDbf(insert);
                            ProgressBar.next();
                        }
                        dao.fecharConexao();
                        dao.atualizaDeDadosConvertidos(jTextNomeBanco.getText(), tabela);
                    }
                    JOptionPane.showMessageDialog(null, "Base " + jTextNomeBanco.getText() + " criada com sucesso! \n");
                    ProgressBar.dispose();
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                    ProgressBar.dispose();
                    JOptionPane.showMessageDialog(null, "Erro ao criar ou popular a tabela: " + dao.getNomeDaTabela() + "\n\nErro: " + ex);
                    Exceptions.printStackTrace(ex);
                    ProgressBar.dispose();
                }
            }
        };
        thread.start();
    }
}
