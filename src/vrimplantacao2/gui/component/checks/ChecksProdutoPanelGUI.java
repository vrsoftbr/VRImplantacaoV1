package vrimplantacao2.gui.component.checks;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JPanel;
import vrimplantacao2.dao.cadastro.nutricional.OpcaoNutricional;
import vrimplantacao2.dao.cadastro.produto.OpcaoProduto;
import vrimplantacao2.dao.interfaces.Importador;
import vrimplantacao2.vo.cadastro.receita.OpcaoReceitaBalanca;
import vrimplantacao2.vo.enums.OpcaoFiscal;

/**
 *
 * @author Leandro
 */
public class ChecksProdutoPanelGUI extends JPanel {

    private Importador importador;
        
    public void setImportador(Importador importador) {
        this.importador = importador;
    }    
    
    /**
     * Creates new form ChecksProdutoPanelGUI
     */
    public ChecksProdutoPanelGUI() {
        initComponents();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chkMercadologico = new vrframework.bean.checkBox.VRCheckBox();
        pnlMercNivel = new javax.swing.JPanel();
        chkMercadologicoPorNivel = new vrframework.bean.checkBox.VRCheckBox();
        chkMercadologicoPorNivelReplicar = new vrframework.bean.checkBox.VRCheckBox();
        chkFamiliaProduto = new vrframework.bean.checkBox.VRCheckBox();
        vRPanel1 = new vrframework.bean.panel.VRPanel();
        chkProdutos = new vrframework.bean.checkBox.VRCheckBox();
        chkManterBalanca = new vrframework.bean.checkBox.VRCheckBox();
        chkCusto = new vrframework.bean.checkBox.VRCheckBox();
        chkCustoSemImposto = new vrframework.bean.checkBox.VRCheckBox();
        chkCustoComImposto = new vrframework.bean.checkBox.VRCheckBox();
        chkPreco = new vrframework.bean.checkBox.VRCheckBox();
        chkEstoque = new vrframework.bean.checkBox.VRCheckBox();
        chkEAN = new vrframework.bean.checkBox.VRCheckBox();
        chkEANemBranco = new vrframework.bean.checkBox.VRCheckBox();
        chkPisCofins = new vrframework.bean.checkBox.VRCheckBox();
        chkNatReceita = new vrframework.bean.checkBox.VRCheckBox();
        chkICMS = new vrframework.bean.checkBox.VRCheckBox();
        chkAtivoInativo = new vrframework.bean.checkBox.VRCheckBox();
        chkDescCompleta = new vrframework.bean.checkBox.VRCheckBox();
        chkDescReduzida = new vrframework.bean.checkBox.VRCheckBox();
        chkDescGondola = new vrframework.bean.checkBox.VRCheckBox();
        chkProdMercadologico = new vrframework.bean.checkBox.VRCheckBox();
        chkValidade = new vrframework.bean.checkBox.VRCheckBox();
        chkFamilia = new vrframework.bean.checkBox.VRCheckBox();
        chkTipoEmbalagemEAN = new vrframework.bean.checkBox.VRCheckBox();
        chkQtdEmbalagemEAN = new vrframework.bean.checkBox.VRCheckBox();
        chkMargem = new vrframework.bean.checkBox.VRCheckBox();
        chkNutricionalFilizola = new vrframework.bean.checkBox.VRCheckBox();
        chkNutricionalToledo = new vrframework.bean.checkBox.VRCheckBox();
        btnMapaTribut = new vrframework.bean.button.VRButton();
        chkPautaFiscal = new vrframework.bean.checkBox.VRCheckBox();
        chkPautaFiscalProduto = new vrframework.bean.checkBox.VRCheckBox();
        chkPSitCadastro = new vrframework.bean.checkBox.VRCheckBox();
        chkPDescontinuado = new vrframework.bean.checkBox.VRCheckBox();
        chkPVendaPdv = new vrframework.bean.checkBox.VRCheckBox();
        chkPSugestaoCotacao = new vrframework.bean.checkBox.VRCheckBox();
        chkPComprador = new vrframework.bean.checkBox.VRCheckBox();
        chkPProdComprador = new vrframework.bean.checkBox.VRCheckBox();
        chkPReceitaFilizola = new vrframework.bean.checkBox.VRCheckBox();
        chkPReceitaToledo = new vrframework.bean.checkBox.VRCheckBox();
        chkOferta = new vrframework.bean.checkBox.VRCheckBox();
        chkAtacado = new vrframework.bean.checkBox.VRCheckBox();
        chkNcm = new vrframework.bean.checkBox.VRCheckBox();
        chkCest = new vrframework.bean.checkBox.VRCheckBox();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(chkMercadologico, "Mercadologico");
        chkMercadologico.setEnabled(true);
        add(chkMercadologico);

        pnlMercNivel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        org.openide.awt.Mnemonics.setLocalizedText(chkMercadologicoPorNivel, "Mercadologico Por Nível");
        chkMercadologicoPorNivel.setEnabled(true);

        org.openide.awt.Mnemonics.setLocalizedText(chkMercadologicoPorNivelReplicar, "Replicar Subníveis");
        chkMercadologicoPorNivelReplicar.setEnabled(true);

        javax.swing.GroupLayout pnlMercNivelLayout = new javax.swing.GroupLayout(pnlMercNivel);
        pnlMercNivel.setLayout(pnlMercNivelLayout);
        pnlMercNivelLayout.setHorizontalGroup(
            pnlMercNivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMercNivelLayout.createSequentialGroup()
                .addComponent(chkMercadologicoPorNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMercadologicoPorNivelReplicar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMercNivelLayout.setVerticalGroup(
            pnlMercNivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMercNivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(chkMercadologicoPorNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(chkMercadologicoPorNivelReplicar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        add(pnlMercNivel);

        org.openide.awt.Mnemonics.setLocalizedText(chkFamiliaProduto, "Familia Produto");
        chkFamiliaProduto.setEnabled(true);
        add(chkFamiliaProduto);

        org.openide.awt.Mnemonics.setLocalizedText(chkProdutos, "Produtos");
        chkProdutos.setEnabled(true);

        org.openide.awt.Mnemonics.setLocalizedText(chkManterBalanca, "Manter Balança");
        chkManterBalanca.setEnabled(true);

        javax.swing.GroupLayout vRPanel1Layout = new javax.swing.GroupLayout(vRPanel1);
        vRPanel1.setLayout(vRPanel1Layout);
        vRPanel1Layout.setHorizontalGroup(
            vRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vRPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(chkProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkManterBalanca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );
        vRPanel1Layout.setVerticalGroup(
            vRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vRPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(vRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkManterBalanca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        add(vRPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(chkCusto, "Custo");
        add(chkCusto);

        org.openide.awt.Mnemonics.setLocalizedText(chkCustoSemImposto, "Custo Sem Imposto");
        add(chkCustoSemImposto);

        org.openide.awt.Mnemonics.setLocalizedText(chkCustoComImposto, "Custo Com Imposto");
        add(chkCustoComImposto);

        org.openide.awt.Mnemonics.setLocalizedText(chkPreco, "Preço");
        add(chkPreco);

        org.openide.awt.Mnemonics.setLocalizedText(chkEstoque, "Estoque");
        add(chkEstoque);

        org.openide.awt.Mnemonics.setLocalizedText(chkEAN, "EAN");
        add(chkEAN);

        org.openide.awt.Mnemonics.setLocalizedText(chkEANemBranco, "EAN em branco");
        add(chkEANemBranco);

        org.openide.awt.Mnemonics.setLocalizedText(chkPisCofins, "PIS/COFINS");
        add(chkPisCofins);

        org.openide.awt.Mnemonics.setLocalizedText(chkNatReceita, "Nat. Receita");
        add(chkNatReceita);

        org.openide.awt.Mnemonics.setLocalizedText(chkICMS, "ICMS");
        add(chkICMS);

        org.openide.awt.Mnemonics.setLocalizedText(chkAtivoInativo, "Ativo/Inativo");
        add(chkAtivoInativo);

        org.openide.awt.Mnemonics.setLocalizedText(chkDescCompleta, "Descrição Completa");
        add(chkDescCompleta);

        org.openide.awt.Mnemonics.setLocalizedText(chkDescReduzida, "Descrição Reduzida");
        add(chkDescReduzida);

        org.openide.awt.Mnemonics.setLocalizedText(chkDescGondola, "Descrição Gondola");
        add(chkDescGondola);

        org.openide.awt.Mnemonics.setLocalizedText(chkProdMercadologico, "Prod. Mercadológico");
        add(chkProdMercadologico);

        org.openide.awt.Mnemonics.setLocalizedText(chkValidade, "Validade");
        add(chkValidade);

        org.openide.awt.Mnemonics.setLocalizedText(chkFamilia, "Família X Produto");
        chkFamilia.setToolTipText("Corrige o relacionamento entre o produto e a família.");
        add(chkFamilia);

        org.openide.awt.Mnemonics.setLocalizedText(chkTipoEmbalagemEAN, "Tipo Emb. EAN");
        add(chkTipoEmbalagemEAN);

        org.openide.awt.Mnemonics.setLocalizedText(chkQtdEmbalagemEAN, "Qtd. Emb. EAN");
        add(chkQtdEmbalagemEAN);

        org.openide.awt.Mnemonics.setLocalizedText(chkMargem, "Margem");
        add(chkMargem);

        org.openide.awt.Mnemonics.setLocalizedText(chkNutricionalFilizola, "Nutricional (Filizola)");
        add(chkNutricionalFilizola);

        org.openide.awt.Mnemonics.setLocalizedText(chkNutricionalToledo, "Nutricional (Toledo)");
        add(chkNutricionalToledo);

        org.openide.awt.Mnemonics.setLocalizedText(btnMapaTribut, "Mapa de Tribut.");
        btnMapaTribut.setEnabled(false);
        add(btnMapaTribut);

        org.openide.awt.Mnemonics.setLocalizedText(chkPautaFiscal, "Pauta Fiscal");
        add(chkPautaFiscal);

        org.openide.awt.Mnemonics.setLocalizedText(chkPautaFiscalProduto, "Pauta Fiscal X Produto");
        add(chkPautaFiscalProduto);

        org.openide.awt.Mnemonics.setLocalizedText(chkPSitCadastro, "Sit. Cadastro");
        add(chkPSitCadastro);

        org.openide.awt.Mnemonics.setLocalizedText(chkPDescontinuado, "Descontinuado");
        add(chkPDescontinuado);

        org.openide.awt.Mnemonics.setLocalizedText(chkPVendaPdv, "Venda (PDV)");
        add(chkPVendaPdv);

        org.openide.awt.Mnemonics.setLocalizedText(chkPSugestaoCotacao, "Sugestão Cotação");
        add(chkPSugestaoCotacao);

        org.openide.awt.Mnemonics.setLocalizedText(chkPComprador, "Comprador");
        add(chkPComprador);

        org.openide.awt.Mnemonics.setLocalizedText(chkPProdComprador, "Produto Comprador");
        add(chkPProdComprador);

        org.openide.awt.Mnemonics.setLocalizedText(chkPReceitaFilizola, "Receita (Filizola)");
        add(chkPReceitaFilizola);

        org.openide.awt.Mnemonics.setLocalizedText(chkPReceitaToledo, "Receita (Toledo)");
        add(chkPReceitaToledo);

        org.openide.awt.Mnemonics.setLocalizedText(chkOferta, "Oferta");
        add(chkOferta);

        org.openide.awt.Mnemonics.setLocalizedText(chkAtacado, "Atacado");
        add(chkAtacado);

        org.openide.awt.Mnemonics.setLocalizedText(chkNcm, "NCM");
        add(chkNcm);

        org.openide.awt.Mnemonics.setLocalizedText(chkCest, "CEST");
        add(chkCest);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public vrframework.bean.button.VRButton btnMapaTribut;
    public vrframework.bean.checkBox.VRCheckBox chkAtacado;
    public vrframework.bean.checkBox.VRCheckBox chkAtivoInativo;
    public vrframework.bean.checkBox.VRCheckBox chkCest;
    public vrframework.bean.checkBox.VRCheckBox chkCusto;
    public vrframework.bean.checkBox.VRCheckBox chkCustoComImposto;
    public vrframework.bean.checkBox.VRCheckBox chkCustoSemImposto;
    public vrframework.bean.checkBox.VRCheckBox chkDescCompleta;
    public vrframework.bean.checkBox.VRCheckBox chkDescGondola;
    public vrframework.bean.checkBox.VRCheckBox chkDescReduzida;
    public vrframework.bean.checkBox.VRCheckBox chkEAN;
    public vrframework.bean.checkBox.VRCheckBox chkEANemBranco;
    public vrframework.bean.checkBox.VRCheckBox chkEstoque;
    public vrframework.bean.checkBox.VRCheckBox chkFamilia;
    public vrframework.bean.checkBox.VRCheckBox chkFamiliaProduto;
    public vrframework.bean.checkBox.VRCheckBox chkICMS;
    public vrframework.bean.checkBox.VRCheckBox chkManterBalanca;
    public vrframework.bean.checkBox.VRCheckBox chkMargem;
    public vrframework.bean.checkBox.VRCheckBox chkMercadologico;
    public vrframework.bean.checkBox.VRCheckBox chkMercadologicoPorNivel;
    public vrframework.bean.checkBox.VRCheckBox chkMercadologicoPorNivelReplicar;
    public vrframework.bean.checkBox.VRCheckBox chkNatReceita;
    public vrframework.bean.checkBox.VRCheckBox chkNcm;
    public vrframework.bean.checkBox.VRCheckBox chkNutricionalFilizola;
    public vrframework.bean.checkBox.VRCheckBox chkNutricionalToledo;
    public vrframework.bean.checkBox.VRCheckBox chkOferta;
    public vrframework.bean.checkBox.VRCheckBox chkPComprador;
    public vrframework.bean.checkBox.VRCheckBox chkPDescontinuado;
    public vrframework.bean.checkBox.VRCheckBox chkPProdComprador;
    public vrframework.bean.checkBox.VRCheckBox chkPReceitaFilizola;
    public vrframework.bean.checkBox.VRCheckBox chkPReceitaToledo;
    public vrframework.bean.checkBox.VRCheckBox chkPSitCadastro;
    public vrframework.bean.checkBox.VRCheckBox chkPSugestaoCotacao;
    public vrframework.bean.checkBox.VRCheckBox chkPVendaPdv;
    public vrframework.bean.checkBox.VRCheckBox chkPautaFiscal;
    public vrframework.bean.checkBox.VRCheckBox chkPautaFiscalProduto;
    public vrframework.bean.checkBox.VRCheckBox chkPisCofins;
    public vrframework.bean.checkBox.VRCheckBox chkPreco;
    public vrframework.bean.checkBox.VRCheckBox chkProdMercadologico;
    public vrframework.bean.checkBox.VRCheckBox chkProdutos;
    public vrframework.bean.checkBox.VRCheckBox chkQtdEmbalagemEAN;
    public vrframework.bean.checkBox.VRCheckBox chkTipoEmbalagemEAN;
    public vrframework.bean.checkBox.VRCheckBox chkValidade;
    public javax.swing.JPanel pnlMercNivel;
    public vrframework.bean.panel.VRPanel vRPanel1;
    // End of variables declaration//GEN-END:variables

    public void executarImportacao() throws Exception {
        new ProdutoPanelImportador().importar();
    }
    public void executarImportacao(ProdutoPanelImportador produtoPanelImportador) throws Exception {
        if (produtoPanelImportador != null) {
            produtoPanelImportador.importar();
        }
    }
    
    public class ProdutoPanelImportador {
        public void importar() throws Exception {
            if (chkFamiliaProduto.isSelected()) {
                importador.importarFamiliaProduto();
            }

            if (chkMercadologico.isSelected()) {
                importador.importarMercadologico();
            }

            if (chkMercadologicoPorNivel.isSelected()) {
                importador.importarMercadologicoPorNiveis(chkMercadologicoPorNivelReplicar.isSelected());
            }

            if (chkProdutos.isSelected()) {
                importador.importarProduto(chkManterBalanca.isSelected());
            }
            if (chkPautaFiscal.isSelected()) {
                importador.importarPautaFiscal(OpcaoFiscal.NOVOS);
            }
            if (chkPComprador.isSelected()) {
                importador.importarComprador();
            }             

            {
                List<OpcaoProduto> opcoes = new ArrayList<>();
                if (chkCusto.isSelected()) {
                    opcoes.add(OpcaoProduto.CUSTO);
                }
                if (chkCustoComImposto.isSelected()) {
                    opcoes.add(OpcaoProduto.CUSTO_COM_IMPOSTO);
                }
                if (chkCustoSemImposto.isSelected()) {
                    opcoes.add(OpcaoProduto.CUSTO_SEM_IMPOSTO);
                }
                if (chkPreco.isSelected()) {
                    opcoes.add(OpcaoProduto.PRECO);
                }
                if (chkEstoque.isSelected()) {
                    opcoes.add(OpcaoProduto.ESTOQUE);
                }
                if (chkPisCofins.isSelected()) {
                    opcoes.add(OpcaoProduto.PIS_COFINS);
                }
                if (chkNatReceita.isSelected()) {
                    opcoes.add(OpcaoProduto.NATUREZA_RECEITA);
                }
                if (chkICMS.isSelected()) {
                    opcoes.add(OpcaoProduto.ICMS);
                }
                if (chkAtivoInativo.isSelected()) {
                    opcoes.add(OpcaoProduto.ATIVO);
                }
                if (chkDescCompleta.isSelected()) {
                    opcoes.add(OpcaoProduto.DESC_COMPLETA);
                }
                if (chkDescReduzida.isSelected()) {
                    opcoes.add(OpcaoProduto.DESC_REDUZIDA);
                }
                if (chkDescGondola.isSelected()) {
                    opcoes.add(OpcaoProduto.DESC_GONDOLA);
                }
                if (chkProdMercadologico.isSelected()) {
                    opcoes.add(OpcaoProduto.MERCADOLOGICO);
                }
                if (chkValidade.isSelected()) {
                    opcoes.add(OpcaoProduto.VALIDADE);
                }
                if (chkMargem.isSelected()) {
                    opcoes.add(OpcaoProduto.MARGEM);
                }
                if (chkFamilia.isSelected()) {
                    opcoes.add(OpcaoProduto.FAMILIA);
                }
                if (chkTipoEmbalagemEAN.isSelected()) {
                    opcoes.add(OpcaoProduto.TIPO_EMBALAGEM_EAN);
                }
                if (chkQtdEmbalagemEAN.isSelected()) {
                    opcoes.add(OpcaoProduto.QTD_EMBALAGEM_EAN);
                }
                if (chkPautaFiscalProduto.isSelected()) {
                    opcoes.add(OpcaoProduto.EXCECAO);
                }
                if (chkPSitCadastro.isSelected()) {
                    opcoes.add(OpcaoProduto.ATIVO);
                }
                if (chkPDescontinuado.isSelected()) {
                    opcoes.add(OpcaoProduto.DESCONTINUADO);
                }
                if (chkPVendaPdv.isSelected()) {
                    opcoes.add(OpcaoProduto.VENDA_PDV);
                }
                if (chkPSugestaoCotacao.isSelected()) {
                    opcoes.add(OpcaoProduto.SUGESTAO_COTACAO);
                }
                if (chkPProdComprador.isSelected()) {
                    opcoes.add(OpcaoProduto.COMPRADOR);
                }
                if (chkAtacado.isSelected()) {
                    opcoes.add(OpcaoProduto.ATACADO);
                }
                if (chkNcm.isSelected()) {
                    opcoes.add(OpcaoProduto.NCM);
                }
                if (chkCest.isSelected()) {
                    opcoes.add(OpcaoProduto.CEST);
                }
                if (!opcoes.isEmpty()) {
                    importador.atualizarProdutos(opcoes);
                }
            }
            if (chkEAN.isSelected()) {
                importador.importarEAN();
            }
            if (chkEANemBranco.isSelected()) {
                importador.importarEANemBranco();
            }                        

            {
                List<OpcaoNutricional> opcoes = new ArrayList<>();
                if (chkNutricionalFilizola.isSelected()) {
                    opcoes.add(OpcaoNutricional.FILIZOLA);
                }
                if (chkNutricionalToledo.isSelected()) {
                    opcoes.add(OpcaoNutricional.TOLEDO);
                }
                if (!opcoes.isEmpty()) {
                    importador.importarNutricional(opcoes.toArray(new OpcaoNutricional[] {}));
                }                            
            }

            {
                List<OpcaoReceitaBalanca> opcoes = new ArrayList<>();
                if (chkPReceitaFilizola.isSelected()) {
                    opcoes.add(OpcaoReceitaBalanca.FILIZOLA);
                }
                if (chkPReceitaToledo.isSelected()) {
                    opcoes.add(OpcaoReceitaBalanca.TOLEDO);
                }
                if (!opcoes.isEmpty()) {
                    importador.importarReceitaBalanca(opcoes.toArray(new OpcaoReceitaBalanca[] {}));
                }                            
            }

            if (chkOferta.isSelected()) {
                importador.importarOfertas(new Date());
            }
        }
    }
   
}
