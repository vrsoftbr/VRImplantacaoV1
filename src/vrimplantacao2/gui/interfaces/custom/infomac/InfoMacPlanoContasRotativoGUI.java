/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vrimplantacao2.gui.interfaces.custom.infomac;

import vrimplantacao2.gui.interfaces.custom.arius.*;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JPanel;
import vrframework.classe.Util;
import vrimplantacao2.dao.interfaces.InfoMacDAO;

/**
 *
 * @author Guilherme
 */
public class InfoMacPlanoContasRotativoGUI extends JPanel {
    
    private static final Logger LOG = Logger.getLogger(InfoMacPlanoContasRotativoGUI.class.getName());

    private InfoMacDAO dao;

    public void setDao(InfoMacDAO dao) {
        this.dao = dao;
        atualizarListagem();        
    }

    public boolean isSelected() {
        return chkAtivar.isSelected();
    }
    
    /**
     * Creates new form AriusPlanoContasGUI
     */
    public InfoMacPlanoContasRotativoGUI() {
        initComponents();
        pnlLista.setEnabled(false);
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLista = new vrframework.bean.panel.VRPanel();
        btnAtualizar = new vrframework.bean.button.VRButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPlanoContas = new vrframework.bean.list.VRList();
        vRLabel1 = new vrframework.bean.label.VRLabel();
        chkAtivar = new vrframework.bean.checkBox.VRCheckBox();

        pnlLista.setBorder(null);

        org.openide.awt.Mnemonics.setLocalizedText(btnAtualizar, "Atualizar a listagem");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        lstPlanoContas.setModel(new Model());
        lstPlanoContas.setCellRenderer(new ListRenderer());
        jScrollPane1.setViewportView(lstPlanoContas);

        org.openide.awt.Mnemonics.setLocalizedText(vRLabel1, "Listagem de Planos de Contas");

        javax.swing.GroupLayout pnlListaLayout = new javax.swing.GroupLayout(pnlLista);
        pnlLista.setLayout(pnlListaLayout);
        pnlListaLayout.setHorizontalGroup(
            pnlListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(btnAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlListaLayout.createSequentialGroup()
                .addComponent(vRLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 33, Short.MAX_VALUE))
        );
        pnlListaLayout.setVerticalGroup(
            pnlListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListaLayout.createSequentialGroup()
                .addComponent(vRLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(chkAtivar, "Cr√©dito Rotativo");
        chkAtivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAtivarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        atualizarListagem();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void chkAtivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAtivarActionPerformed
        pnlLista.setEnabled(chkAtivar.isSelected());
    }//GEN-LAST:event_chkAtivarActionPerformed

    public void atualizarListagem() {
        try {
            if (dao != null) {
                ((Model) lstPlanoContas.getModel()).setPlanoContasEntrada(dao.getPlanoContasEntrada());
                lstPlanoContas.setSelectedIndex(0);
            }        
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "Erro ao carregar o plano de contas", ex);
            Util.exibirMensagemErro(ex, "Erro ao carregar o plano de contas");
        }
    }
    
    private class Model extends AbstractListModel<InfoMacDAO.PlanoConta> {

        private List<InfoMacDAO.PlanoConta> planoContasEntrada = new ArrayList<>();

        public void setPlanoContasEntrada(List<InfoMacDAO.PlanoConta> planoContasEntrada) {
            this.planoContasEntrada = planoContasEntrada;
            fireContentsChanged(this.planoContasEntrada, 0, this.planoContasEntrada.size() - 1);
        }
        
        @Override
        public int getSize() {
            return planoContasEntrada.size();
        }

        @Override
        public InfoMacDAO.PlanoConta getElementAt(int index) {
            return planoContasEntrada.get(index);
        }        
    
    }
    
    private class ListRenderer extends DefaultListCellRenderer {
        
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            DefaultListCellRenderer c = (DefaultListCellRenderer) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            InfoMacDAO.PlanoConta val = (InfoMacDAO.PlanoConta) value;
            c.setText(val.getId() + " - " + val.getDescricao());
            return c;
        }
        
    }
    
    public List<InfoMacDAO.PlanoConta> getPlanosSelecionados() {
        List<InfoMacDAO.PlanoConta> selectedValuesList = lstPlanoContas.getSelectedValuesList();
        
        return selectedValuesList;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public vrframework.bean.button.VRButton btnAtualizar;
    public vrframework.bean.checkBox.VRCheckBox chkAtivar;
    public javax.swing.JScrollPane jScrollPane1;
    public vrframework.bean.list.VRList lstPlanoContas;
    public vrframework.bean.panel.VRPanel pnlLista;
    public vrframework.bean.label.VRLabel vRLabel1;
    // End of variables declaration//GEN-END:variables
}
